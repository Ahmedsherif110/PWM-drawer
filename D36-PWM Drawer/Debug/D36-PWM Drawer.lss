
D36-PWM Drawer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000898  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00800060  00000898  0000092c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000aa  008000aa  00000976  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000976  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000176a  00000000  00000000  00000aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ff  00000000  00000000  00002256  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000093a  00000000  00000000  00002b55  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000288  00000000  00000000  00003490  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006d7  00000000  00000000  00003718  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d04  00000000  00000000  00003def  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00004af3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e9       	ldi	r30, 0x98	; 152
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 3a       	cpi	r26, 0xAA	; 170
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa ea       	ldi	r26, 0xAA	; 170
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3b       	cpi	r26, 0xB0	; 176
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8d 03 	call	0x71a	; 0x71a <main>
  8a:	0c 94 4a 04 	jmp	0x894	; 0x894 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Dio_ConfigChannel>:
 */ 
#include "Dio.h"

void Dio_ConfigChannel(port_type port, pin_type pin, direction_type direction)
{
	switch(port)
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	01 f1       	breq	.+64     	; 0xd6 <Dio_ConfigChannel+0x44>
  96:	30 f0       	brcs	.+12     	; 0xa4 <Dio_ConfigChannel+0x12>
  98:	82 30       	cpi	r24, 0x02	; 2
  9a:	b1 f1       	breq	.+108    	; 0x108 <Dio_ConfigChannel+0x76>
  9c:	83 30       	cpi	r24, 0x03	; 3
  9e:	09 f4       	brne	.+2      	; 0xa2 <Dio_ConfigChannel+0x10>
  a0:	4c c0       	rjmp	.+152    	; 0x13a <Dio_ConfigChannel+0xa8>
  a2:	08 95       	ret
	{
		case DIO_PORTA:
		if(direction == INPUT)
  a4:	41 11       	cpse	r20, r1
  a6:	0c c0       	rjmp	.+24     	; 0xc0 <Dio_ConfigChannel+0x2e>
		CLR_BIT(DIO_DDRA_REG, pin);
  a8:	2a b3       	in	r18, 0x1a	; 26
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <Dio_ConfigChannel+0x22>
  b0:	88 0f       	add	r24, r24
  b2:	99 1f       	adc	r25, r25
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <Dio_ConfigChannel+0x1e>
  b8:	80 95       	com	r24
  ba:	82 23       	and	r24, r18
  bc:	8a bb       	out	0x1a, r24	; 26
  be:	08 95       	ret
		else
		SET_BIT(DIO_DDRA_REG, pin);
  c0:	2a b3       	in	r18, 0x1a	; 26
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <Dio_ConfigChannel+0x3a>
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <Dio_ConfigChannel+0x36>
  d0:	82 2b       	or	r24, r18
  d2:	8a bb       	out	0x1a, r24	; 26
  d4:	08 95       	ret
		break;
		case DIO_PORTB:
		if(direction == INPUT)
  d6:	41 11       	cpse	r20, r1
  d8:	0c c0       	rjmp	.+24     	; 0xf2 <Dio_ConfigChannel+0x60>
		CLR_BIT(DIO_DDRB_REG, pin);
  da:	27 b3       	in	r18, 0x17	; 23
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <Dio_ConfigChannel+0x54>
  e2:	88 0f       	add	r24, r24
  e4:	99 1f       	adc	r25, r25
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <Dio_ConfigChannel+0x50>
  ea:	80 95       	com	r24
  ec:	82 23       	and	r24, r18
  ee:	87 bb       	out	0x17, r24	; 23
  f0:	08 95       	ret
		else
		SET_BIT(DIO_DDRB_REG, pin);
  f2:	27 b3       	in	r18, 0x17	; 23
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <Dio_ConfigChannel+0x6c>
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	6a 95       	dec	r22
 100:	e2 f7       	brpl	.-8      	; 0xfa <Dio_ConfigChannel+0x68>
 102:	82 2b       	or	r24, r18
 104:	87 bb       	out	0x17, r24	; 23
 106:	08 95       	ret
		break;
		case DIO_PORTC:
		if(direction == INPUT)
 108:	41 11       	cpse	r20, r1
 10a:	0c c0       	rjmp	.+24     	; 0x124 <Dio_ConfigChannel+0x92>
		CLR_BIT(DIO_DDRC_REG, pin);
 10c:	24 b3       	in	r18, 0x14	; 20
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <Dio_ConfigChannel+0x86>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <Dio_ConfigChannel+0x82>
 11c:	80 95       	com	r24
 11e:	82 23       	and	r24, r18
 120:	84 bb       	out	0x14, r24	; 20
 122:	08 95       	ret
		else
		SET_BIT(DIO_DDRC_REG, pin);
 124:	24 b3       	in	r18, 0x14	; 20
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <Dio_ConfigChannel+0x9e>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	6a 95       	dec	r22
 132:	e2 f7       	brpl	.-8      	; 0x12c <Dio_ConfigChannel+0x9a>
 134:	82 2b       	or	r24, r18
 136:	84 bb       	out	0x14, r24	; 20
 138:	08 95       	ret
		break;
		case DIO_PORTD:
		if(direction == INPUT)
 13a:	41 11       	cpse	r20, r1
 13c:	0c c0       	rjmp	.+24     	; 0x156 <Dio_ConfigChannel+0xc4>
		CLR_BIT(DIO_DDRD_REG, pin);
 13e:	21 b3       	in	r18, 0x11	; 17
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <Dio_ConfigChannel+0xb8>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <Dio_ConfigChannel+0xb4>
 14e:	80 95       	com	r24
 150:	82 23       	and	r24, r18
 152:	81 bb       	out	0x11, r24	; 17
 154:	08 95       	ret
		else
		SET_BIT(DIO_DDRD_REG, pin);
 156:	21 b3       	in	r18, 0x11	; 17
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <Dio_ConfigChannel+0xd0>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	6a 95       	dec	r22
 164:	e2 f7       	brpl	.-8      	; 0x15e <Dio_ConfigChannel+0xcc>
 166:	82 2b       	or	r24, r18
 168:	81 bb       	out	0x11, r24	; 17
 16a:	08 95       	ret

0000016c <Dio_WriteChannel>:
	}
}

void Dio_WriteChannel(port_type port, pin_type pin, level_type level)
{
	switch(port)
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	01 f1       	breq	.+64     	; 0x1b0 <Dio_WriteChannel+0x44>
 170:	30 f0       	brcs	.+12     	; 0x17e <Dio_WriteChannel+0x12>
 172:	82 30       	cpi	r24, 0x02	; 2
 174:	b1 f1       	breq	.+108    	; 0x1e2 <Dio_WriteChannel+0x76>
 176:	83 30       	cpi	r24, 0x03	; 3
 178:	09 f4       	brne	.+2      	; 0x17c <Dio_WriteChannel+0x10>
 17a:	4c c0       	rjmp	.+152    	; 0x214 <Dio_WriteChannel+0xa8>
 17c:	08 95       	ret
	{
		case DIO_PORTA:
		if(level == STD_HIGH)
 17e:	41 30       	cpi	r20, 0x01	; 1
 180:	59 f4       	brne	.+22     	; 0x198 <Dio_WriteChannel+0x2c>
		SET_BIT(DIO_PORTA_REG, pin);
 182:	2b b3       	in	r18, 0x1b	; 27
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	02 c0       	rjmp	.+4      	; 0x18e <Dio_WriteChannel+0x22>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	6a 95       	dec	r22
 190:	e2 f7       	brpl	.-8      	; 0x18a <Dio_WriteChannel+0x1e>
 192:	82 2b       	or	r24, r18
 194:	8b bb       	out	0x1b, r24	; 27
 196:	08 95       	ret
		else
		CLR_BIT(DIO_PORTA_REG, pin);
 198:	2b b3       	in	r18, 0x1b	; 27
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <Dio_WriteChannel+0x38>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	6a 95       	dec	r22
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <Dio_WriteChannel+0x34>
 1a8:	80 95       	com	r24
 1aa:	82 23       	and	r24, r18
 1ac:	8b bb       	out	0x1b, r24	; 27
 1ae:	08 95       	ret
		break;
		case DIO_PORTB:
		if(level == STD_HIGH)
 1b0:	41 30       	cpi	r20, 0x01	; 1
 1b2:	59 f4       	brne	.+22     	; 0x1ca <Dio_WriteChannel+0x5e>
		SET_BIT(DIO_PORTB_REG, pin);
 1b4:	28 b3       	in	r18, 0x18	; 24
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <Dio_WriteChannel+0x54>
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	6a 95       	dec	r22
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <Dio_WriteChannel+0x50>
 1c4:	82 2b       	or	r24, r18
 1c6:	88 bb       	out	0x18, r24	; 24
 1c8:	08 95       	ret
		else
		CLR_BIT(DIO_PORTB_REG, pin);
 1ca:	28 b3       	in	r18, 0x18	; 24
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <Dio_WriteChannel+0x6a>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	6a 95       	dec	r22
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <Dio_WriteChannel+0x66>
 1da:	80 95       	com	r24
 1dc:	82 23       	and	r24, r18
 1de:	88 bb       	out	0x18, r24	; 24
 1e0:	08 95       	ret
		break;
		case DIO_PORTC:
		if(level == STD_HIGH)
 1e2:	41 30       	cpi	r20, 0x01	; 1
 1e4:	59 f4       	brne	.+22     	; 0x1fc <Dio_WriteChannel+0x90>
		SET_BIT(DIO_PORTC_REG, pin);
 1e6:	25 b3       	in	r18, 0x15	; 21
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <Dio_WriteChannel+0x86>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	6a 95       	dec	r22
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <Dio_WriteChannel+0x82>
 1f6:	82 2b       	or	r24, r18
 1f8:	85 bb       	out	0x15, r24	; 21
 1fa:	08 95       	ret
		else
		CLR_BIT(DIO_PORTC_REG, pin);
 1fc:	25 b3       	in	r18, 0x15	; 21
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <Dio_WriteChannel+0x9c>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	6a 95       	dec	r22
 20a:	e2 f7       	brpl	.-8      	; 0x204 <Dio_WriteChannel+0x98>
 20c:	80 95       	com	r24
 20e:	82 23       	and	r24, r18
 210:	85 bb       	out	0x15, r24	; 21
 212:	08 95       	ret
		break;
		case DIO_PORTD:
		if(level == STD_HIGH)
 214:	41 30       	cpi	r20, 0x01	; 1
 216:	59 f4       	brne	.+22     	; 0x22e <Dio_WriteChannel+0xc2>
		SET_BIT(DIO_PORTD_REG, pin);
 218:	22 b3       	in	r18, 0x12	; 18
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	02 c0       	rjmp	.+4      	; 0x224 <Dio_WriteChannel+0xb8>
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	6a 95       	dec	r22
 226:	e2 f7       	brpl	.-8      	; 0x220 <Dio_WriteChannel+0xb4>
 228:	82 2b       	or	r24, r18
 22a:	82 bb       	out	0x12, r24	; 18
 22c:	08 95       	ret
		else
		CLR_BIT(DIO_PORTD_REG, pin);
 22e:	22 b3       	in	r18, 0x12	; 18
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	02 c0       	rjmp	.+4      	; 0x23a <Dio_WriteChannel+0xce>
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <Dio_WriteChannel+0xca>
 23e:	80 95       	com	r24
 240:	82 23       	and	r24, r18
 242:	82 bb       	out	0x12, r24	; 18
 244:	08 95       	ret

00000246 <Dio_WriteGroup>:
	}
}

void Dio_WriteGroup(port_type port, u8 mask, u8 data)
{
	switch(port)
 246:	81 30       	cpi	r24, 0x01	; 1
 248:	71 f0       	breq	.+28     	; 0x266 <Dio_WriteGroup+0x20>
 24a:	28 f0       	brcs	.+10     	; 0x256 <Dio_WriteGroup+0x10>
 24c:	82 30       	cpi	r24, 0x02	; 2
 24e:	99 f0       	breq	.+38     	; 0x276 <Dio_WriteGroup+0x30>
 250:	83 30       	cpi	r24, 0x03	; 3
 252:	c9 f0       	breq	.+50     	; 0x286 <Dio_WriteGroup+0x40>
 254:	08 95       	ret
	{
		case DIO_PORTA:
		DIO_PORTA_REG = (DIO_PORTA_REG&~mask)|(data & mask);
 256:	8b b3       	in	r24, 0x1b	; 27
 258:	96 2f       	mov	r25, r22
 25a:	90 95       	com	r25
 25c:	89 23       	and	r24, r25
 25e:	46 23       	and	r20, r22
 260:	48 2b       	or	r20, r24
 262:	4b bb       	out	0x1b, r20	; 27
		break;
 264:	08 95       	ret
		case DIO_PORTB:
		DIO_PORTB_REG = (DIO_PORTA_REG&~mask)|(data & mask);
 266:	8b b3       	in	r24, 0x1b	; 27
 268:	96 2f       	mov	r25, r22
 26a:	90 95       	com	r25
 26c:	89 23       	and	r24, r25
 26e:	46 23       	and	r20, r22
 270:	48 2b       	or	r20, r24
 272:	48 bb       	out	0x18, r20	; 24
		break;
 274:	08 95       	ret
		case DIO_PORTC:
		DIO_PORTC_REG = (DIO_PORTA_REG&~mask)|(data & mask);
 276:	8b b3       	in	r24, 0x1b	; 27
 278:	96 2f       	mov	r25, r22
 27a:	90 95       	com	r25
 27c:	89 23       	and	r24, r25
 27e:	46 23       	and	r20, r22
 280:	48 2b       	or	r20, r24
 282:	45 bb       	out	0x15, r20	; 21
		break;
 284:	08 95       	ret
		case DIO_PORTD:
		DIO_PORTD_REG = (DIO_PORTA_REG&~mask)|(data & mask);
 286:	8b b3       	in	r24, 0x1b	; 27
 288:	96 2f       	mov	r25, r22
 28a:	90 95       	com	r25
 28c:	89 23       	and	r24, r25
 28e:	46 23       	and	r20, r22
 290:	48 2b       	or	r20, r24
 292:	42 bb       	out	0x12, r20	; 18
 294:	08 95       	ret

00000296 <Enable_Pulse>:
void Lcd_Display3Num(u16 num)
{
	Lcd_DisplayChr(num/100 + '0');
	Lcd_DisplayChr(num%100/10 + '0');
	Lcd_DisplayChr(num%100%10 + '0');
}
 296:	41 e0       	ldi	r20, 0x01	; 1
 298:	63 e0       	ldi	r22, 0x03	; 3
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	0e 94 b6 00 	call	0x16c	; 0x16c <Dio_WriteChannel>
 2a0:	00 00       	nop
 2a2:	40 e0       	ldi	r20, 0x00	; 0
 2a4:	63 e0       	ldi	r22, 0x03	; 3
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	0e 94 b6 00 	call	0x16c	; 0x16c <Dio_WriteChannel>
 2ac:	83 ef       	ldi	r24, 0xF3	; 243
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <Enable_Pulse+0x1a>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <Enable_Pulse+0x20>
 2b6:	00 00       	nop
 2b8:	08 95       	ret

000002ba <Lcd_Data>:
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	c8 2f       	mov	r28, r24
 2c0:	d8 2f       	mov	r29, r24
 2c2:	d2 95       	swap	r29
 2c4:	d0 7f       	andi	r29, 0xF0	; 240
 2c6:	41 e0       	ldi	r20, 0x01	; 1
 2c8:	61 e0       	ldi	r22, 0x01	; 1
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	0e 94 b6 00 	call	0x16c	; 0x16c <Dio_WriteChannel>
 2d0:	4c 2f       	mov	r20, r28
 2d2:	60 ef       	ldi	r22, 0xF0	; 240
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	0e 94 23 01 	call	0x246	; 0x246 <Dio_WriteGroup>
 2da:	0e 94 4b 01 	call	0x296	; 0x296 <Enable_Pulse>
 2de:	4d 2f       	mov	r20, r29
 2e0:	60 ef       	ldi	r22, 0xF0	; 240
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	0e 94 23 01 	call	0x246	; 0x246 <Dio_WriteGroup>
 2e8:	0e 94 4b 01 	call	0x296	; 0x296 <Enable_Pulse>
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	08 95       	ret

000002f2 <Lcd_Cmd>:
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	c8 2f       	mov	r28, r24
 2f8:	d8 2f       	mov	r29, r24
 2fa:	d2 95       	swap	r29
 2fc:	d0 7f       	andi	r29, 0xF0	; 240
 2fe:	40 e0       	ldi	r20, 0x00	; 0
 300:	61 e0       	ldi	r22, 0x01	; 1
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	0e 94 b6 00 	call	0x16c	; 0x16c <Dio_WriteChannel>
 308:	4c 2f       	mov	r20, r28
 30a:	60 ef       	ldi	r22, 0xF0	; 240
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	0e 94 23 01 	call	0x246	; 0x246 <Dio_WriteGroup>
 312:	0e 94 4b 01 	call	0x296	; 0x296 <Enable_Pulse>
 316:	4d 2f       	mov	r20, r29
 318:	60 ef       	ldi	r22, 0xF0	; 240
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	0e 94 23 01 	call	0x246	; 0x246 <Dio_WriteGroup>
 320:	0e 94 4b 01 	call	0x296	; 0x296 <Enable_Pulse>
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	08 95       	ret

0000032a <Lcd_DisplayChr>:
 32a:	0e 94 5d 01 	call	0x2ba	; 0x2ba <Lcd_Data>
 32e:	08 95       	ret

00000330 <Lcd_WriteCustom>:
 330:	0f 93       	push	r16
 332:	1f 93       	push	r17
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	d0 e0       	ldi	r29, 0x00	; 0
 33a:	1d c0       	rjmp	.+58     	; 0x376 <Lcd_WriteCustom+0x46>
 33c:	0d 2f       	mov	r16, r29
 33e:	10 e0       	ldi	r17, 0x00	; 0
 340:	c8 01       	movw	r24, r16
 342:	08 96       	adiw	r24, 0x08	; 8
 344:	88 0f       	add	r24, r24
 346:	88 0f       	add	r24, r24
 348:	88 0f       	add	r24, r24
 34a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <Lcd_Cmd>
 34e:	c0 e0       	ldi	r28, 0x00	; 0
 350:	0f c0       	rjmp	.+30     	; 0x370 <Lcd_WriteCustom+0x40>
 352:	f8 01       	movw	r30, r16
 354:	ee 0f       	add	r30, r30
 356:	ff 1f       	adc	r31, r31
 358:	ee 0f       	add	r30, r30
 35a:	ff 1f       	adc	r31, r31
 35c:	ee 0f       	add	r30, r30
 35e:	ff 1f       	adc	r31, r31
 360:	e0 5a       	subi	r30, 0xA0	; 160
 362:	ff 4f       	sbci	r31, 0xFF	; 255
 364:	ec 0f       	add	r30, r28
 366:	f1 1d       	adc	r31, r1
 368:	80 81       	ld	r24, Z
 36a:	0e 94 95 01 	call	0x32a	; 0x32a <Lcd_DisplayChr>
 36e:	cf 5f       	subi	r28, 0xFF	; 255
 370:	c8 30       	cpi	r28, 0x08	; 8
 372:	78 f3       	brcs	.-34     	; 0x352 <Lcd_WriteCustom+0x22>
 374:	df 5f       	subi	r29, 0xFF	; 255
 376:	d8 30       	cpi	r29, 0x08	; 8
 378:	08 f3       	brcs	.-62     	; 0x33c <Lcd_WriteCustom+0xc>
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	1f 91       	pop	r17
 380:	0f 91       	pop	r16
 382:	08 95       	ret

00000384 <Lcd_DisplayStr>:
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
 388:	ec 01       	movw	r28, r24
 38a:	03 c0       	rjmp	.+6      	; 0x392 <Lcd_DisplayStr+0xe>
 38c:	0e 94 95 01 	call	0x32a	; 0x32a <Lcd_DisplayChr>
 390:	21 96       	adiw	r28, 0x01	; 1
 392:	88 81       	ld	r24, Y
 394:	81 11       	cpse	r24, r1
 396:	fa cf       	rjmp	.-12     	; 0x38c <Lcd_DisplayStr+0x8>
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	08 95       	ret

0000039e <Lcd_Goto_Row_Column>:
 39e:	88 23       	and	r24, r24
 3a0:	19 f0       	breq	.+6      	; 0x3a8 <Lcd_Goto_Row_Column+0xa>
 3a2:	81 30       	cpi	r24, 0x01	; 1
 3a4:	31 f0       	breq	.+12     	; 0x3b2 <Lcd_Goto_Row_Column+0x14>
 3a6:	08 95       	ret
 3a8:	80 e8       	ldi	r24, 0x80	; 128
 3aa:	86 0f       	add	r24, r22
 3ac:	0e 94 79 01 	call	0x2f2	; 0x2f2 <Lcd_Cmd>
 3b0:	08 95       	ret
 3b2:	80 ec       	ldi	r24, 0xC0	; 192
 3b4:	86 0f       	add	r24, r22
 3b6:	0e 94 79 01 	call	0x2f2	; 0x2f2 <Lcd_Cmd>
 3ba:	08 95       	ret

000003bc <Lcd_Init>:
 3bc:	41 e0       	ldi	r20, 0x01	; 1
 3be:	64 e0       	ldi	r22, 0x04	; 4
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	0e 94 49 00 	call	0x92	; 0x92 <Dio_ConfigChannel>
 3c6:	41 e0       	ldi	r20, 0x01	; 1
 3c8:	65 e0       	ldi	r22, 0x05	; 5
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	0e 94 49 00 	call	0x92	; 0x92 <Dio_ConfigChannel>
 3d0:	41 e0       	ldi	r20, 0x01	; 1
 3d2:	66 e0       	ldi	r22, 0x06	; 6
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	0e 94 49 00 	call	0x92	; 0x92 <Dio_ConfigChannel>
 3da:	41 e0       	ldi	r20, 0x01	; 1
 3dc:	67 e0       	ldi	r22, 0x07	; 7
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	0e 94 49 00 	call	0x92	; 0x92 <Dio_ConfigChannel>
 3e4:	41 e0       	ldi	r20, 0x01	; 1
 3e6:	61 e0       	ldi	r22, 0x01	; 1
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	0e 94 49 00 	call	0x92	; 0x92 <Dio_ConfigChannel>
 3ee:	41 e0       	ldi	r20, 0x01	; 1
 3f0:	62 e0       	ldi	r22, 0x02	; 2
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	0e 94 49 00 	call	0x92	; 0x92 <Dio_ConfigChannel>
 3f8:	41 e0       	ldi	r20, 0x01	; 1
 3fa:	63 e0       	ldi	r22, 0x03	; 3
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	0e 94 49 00 	call	0x92	; 0x92 <Dio_ConfigChannel>
 402:	40 e0       	ldi	r20, 0x00	; 0
 404:	62 e0       	ldi	r22, 0x02	; 2
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	0e 94 b6 00 	call	0x16c	; 0x16c <Dio_WriteChannel>
 40c:	85 ea       	ldi	r24, 0xA5	; 165
 40e:	9e e0       	ldi	r25, 0x0E	; 14
 410:	01 97       	sbiw	r24, 0x01	; 1
 412:	f1 f7       	brne	.-4      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 414:	00 c0       	rjmp	.+0      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 416:	00 00       	nop
 418:	83 e0       	ldi	r24, 0x03	; 3
 41a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <Lcd_Cmd>
 41e:	81 ee       	ldi	r24, 0xE1	; 225
 420:	94 e0       	ldi	r25, 0x04	; 4
 422:	01 97       	sbiw	r24, 0x01	; 1
 424:	f1 f7       	brne	.-4      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 426:	00 c0       	rjmp	.+0      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 428:	00 00       	nop
 42a:	83 e0       	ldi	r24, 0x03	; 3
 42c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <Lcd_Cmd>
 430:	91 e2       	ldi	r25, 0x21	; 33
 432:	9a 95       	dec	r25
 434:	f1 f7       	brne	.-4      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 436:	00 00       	nop
 438:	83 e0       	ldi	r24, 0x03	; 3
 43a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <Lcd_Cmd>
 43e:	82 e0       	ldi	r24, 0x02	; 2
 440:	0e 94 79 01 	call	0x2f2	; 0x2f2 <Lcd_Cmd>
 444:	88 e2       	ldi	r24, 0x28	; 40
 446:	0e 94 79 01 	call	0x2f2	; 0x2f2 <Lcd_Cmd>
 44a:	0e 94 98 01 	call	0x330	; 0x330 <Lcd_WriteCustom>
 44e:	60 e0       	ldi	r22, 0x00	; 0
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	0e 94 cf 01 	call	0x39e	; 0x39e <Lcd_Goto_Row_Column>
 456:	8c e0       	ldi	r24, 0x0C	; 12
 458:	0e 94 79 01 	call	0x2f2	; 0x2f2 <Lcd_Cmd>
 45c:	08 95       	ret

0000045e <Lcd_DisplayNum>:
 45e:	ef 92       	push	r14
 460:	ff 92       	push	r15
 462:	0f 93       	push	r16
 464:	1f 93       	push	r17
 466:	cf 93       	push	r28
 468:	df 93       	push	r29
 46a:	ec 01       	movw	r28, r24
 46c:	7c 01       	movw	r14, r24
 46e:	f6 94       	lsr	r15
 470:	e7 94       	ror	r14
 472:	f6 94       	lsr	r15
 474:	e7 94       	ror	r14
 476:	f6 94       	lsr	r15
 478:	e7 94       	ror	r14
 47a:	97 01       	movw	r18, r14
 47c:	a5 ec       	ldi	r26, 0xC5	; 197
 47e:	b0 e2       	ldi	r27, 0x20	; 32
 480:	0e 94 19 04 	call	0x832	; 0x832 <__umulhisi3>
 484:	8c 01       	movw	r16, r24
 486:	12 95       	swap	r17
 488:	02 95       	swap	r16
 48a:	0f 70       	andi	r16, 0x0F	; 15
 48c:	01 27       	eor	r16, r17
 48e:	1f 70       	andi	r17, 0x0F	; 15
 490:	01 27       	eor	r16, r17
 492:	80 e3       	ldi	r24, 0x30	; 48
 494:	80 0f       	add	r24, r16
 496:	0e 94 95 01 	call	0x32a	; 0x32a <Lcd_DisplayChr>
 49a:	28 ee       	ldi	r18, 0xE8	; 232
 49c:	33 e0       	ldi	r19, 0x03	; 3
 49e:	02 9f       	mul	r16, r18
 4a0:	c0 01       	movw	r24, r0
 4a2:	03 9f       	mul	r16, r19
 4a4:	90 0d       	add	r25, r0
 4a6:	12 9f       	mul	r17, r18
 4a8:	90 0d       	add	r25, r0
 4aa:	11 24       	eor	r1, r1
 4ac:	c8 1b       	sub	r28, r24
 4ae:	d9 0b       	sbc	r29, r25
 4b0:	7e 01       	movw	r14, r28
 4b2:	f6 94       	lsr	r15
 4b4:	e7 94       	ror	r14
 4b6:	f6 94       	lsr	r15
 4b8:	e7 94       	ror	r14
 4ba:	97 01       	movw	r18, r14
 4bc:	ab e7       	ldi	r26, 0x7B	; 123
 4be:	b4 e1       	ldi	r27, 0x14	; 20
 4c0:	0e 94 19 04 	call	0x832	; 0x832 <__umulhisi3>
 4c4:	8c 01       	movw	r16, r24
 4c6:	16 95       	lsr	r17
 4c8:	07 95       	ror	r16
 4ca:	80 e3       	ldi	r24, 0x30	; 48
 4cc:	80 0f       	add	r24, r16
 4ce:	0e 94 95 01 	call	0x32a	; 0x32a <Lcd_DisplayChr>
 4d2:	24 e6       	ldi	r18, 0x64	; 100
 4d4:	20 9f       	mul	r18, r16
 4d6:	c0 01       	movw	r24, r0
 4d8:	21 9f       	mul	r18, r17
 4da:	90 0d       	add	r25, r0
 4dc:	11 24       	eor	r1, r1
 4de:	c8 1b       	sub	r28, r24
 4e0:	d9 0b       	sbc	r29, r25
 4e2:	9e 01       	movw	r18, r28
 4e4:	ad ec       	ldi	r26, 0xCD	; 205
 4e6:	bc ec       	ldi	r27, 0xCC	; 204
 4e8:	0e 94 19 04 	call	0x832	; 0x832 <__umulhisi3>
 4ec:	8c 01       	movw	r16, r24
 4ee:	16 95       	lsr	r17
 4f0:	07 95       	ror	r16
 4f2:	16 95       	lsr	r17
 4f4:	07 95       	ror	r16
 4f6:	16 95       	lsr	r17
 4f8:	07 95       	ror	r16
 4fa:	80 e3       	ldi	r24, 0x30	; 48
 4fc:	80 0f       	add	r24, r16
 4fe:	0e 94 95 01 	call	0x32a	; 0x32a <Lcd_DisplayChr>
 502:	c8 01       	movw	r24, r16
 504:	88 0f       	add	r24, r24
 506:	99 1f       	adc	r25, r25
 508:	00 0f       	add	r16, r16
 50a:	11 1f       	adc	r17, r17
 50c:	00 0f       	add	r16, r16
 50e:	11 1f       	adc	r17, r17
 510:	00 0f       	add	r16, r16
 512:	11 1f       	adc	r17, r17
 514:	08 0f       	add	r16, r24
 516:	19 1f       	adc	r17, r25
 518:	ce 01       	movw	r24, r28
 51a:	80 1b       	sub	r24, r16
 51c:	91 0b       	sbc	r25, r17
 51e:	80 5d       	subi	r24, 0xD0	; 208
 520:	0e 94 95 01 	call	0x32a	; 0x32a <Lcd_DisplayChr>
 524:	df 91       	pop	r29
 526:	cf 91       	pop	r28
 528:	1f 91       	pop	r17
 52a:	0f 91       	pop	r16
 52c:	ff 90       	pop	r15
 52e:	ef 90       	pop	r14
 530:	08 95       	ret

00000532 <Lcd_Display2Num>:

void Lcd_Display2Num(u8 num)
{
 532:	cf 93       	push	r28
 534:	df 93       	push	r29
 536:	d8 2f       	mov	r29, r24
	Lcd_DisplayChr(num/10 + '0');
 538:	cd ec       	ldi	r28, 0xCD	; 205
 53a:	8c 9f       	mul	r24, r28
 53c:	c1 2d       	mov	r28, r1
 53e:	11 24       	eor	r1, r1
 540:	c6 95       	lsr	r28
 542:	c6 95       	lsr	r28
 544:	c6 95       	lsr	r28
 546:	80 e3       	ldi	r24, 0x30	; 48
 548:	8c 0f       	add	r24, r28
 54a:	0e 94 95 01 	call	0x32a	; 0x32a <Lcd_DisplayChr>
	Lcd_DisplayChr(num%10+ '0');
 54e:	cc 0f       	add	r28, r28
 550:	8c 2f       	mov	r24, r28
 552:	88 0f       	add	r24, r24
 554:	88 0f       	add	r24, r24
 556:	c8 0f       	add	r28, r24
 558:	8d 2f       	mov	r24, r29
 55a:	8c 1b       	sub	r24, r28
 55c:	80 5d       	subi	r24, 0xD0	; 208
 55e:	0e 94 95 01 	call	0x32a	; 0x32a <Lcd_DisplayChr>
}
 562:	df 91       	pop	r29
 564:	cf 91       	pop	r28
 566:	08 95       	ret

00000568 <Lcd_Start>:


void Lcd_Start()
{
	//Lcd_Cmd(_LCD_CLEAR);			// For Clear LCD
	Lcd_Goto_Row_Column(0, 0);		// Start From Begin
 568:	60 e0       	ldi	r22, 0x00	; 0
 56a:	70 e0       	ldi	r23, 0x00	; 0
 56c:	80 e0       	ldi	r24, 0x00	; 0
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	0e 94 cf 01 	call	0x39e	; 0x39e <Lcd_Goto_Row_Column>
	Lcd_DisplayStr("F=");
 574:	80 ea       	ldi	r24, 0xA0	; 160
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	0e 94 c2 01 	call	0x384	; 0x384 <Lcd_DisplayStr>
	Lcd_Goto_Row_Column(0, 6);
 57c:	66 e0       	ldi	r22, 0x06	; 6
 57e:	70 e0       	ldi	r23, 0x00	; 0
 580:	80 e0       	ldi	r24, 0x00	; 0
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	0e 94 cf 01 	call	0x39e	; 0x39e <Lcd_Goto_Row_Column>
	Lcd_DisplayStr("T=");
 588:	83 ea       	ldi	r24, 0xA3	; 163
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	0e 94 c2 01 	call	0x384	; 0x384 <Lcd_DisplayStr>
	Lcd_Goto_Row_Column(0, 12);
 590:	6c e0       	ldi	r22, 0x0C	; 12
 592:	70 e0       	ldi	r23, 0x00	; 0
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	0e 94 cf 01 	call	0x39e	; 0x39e <Lcd_Goto_Row_Column>
	Lcd_DisplayStr("D=");
 59c:	86 ea       	ldi	r24, 0xA6	; 166
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	0e 94 c2 01 	call	0x384	; 0x384 <Lcd_DisplayStr>
 5a4:	08 95       	ret

000005a6 <Update_Data>:
}

void Update_Data()
{
 5a6:	cf 92       	push	r12
 5a8:	df 92       	push	r13
 5aa:	ef 92       	push	r14
 5ac:	ff 92       	push	r15
 5ae:	0f 93       	push	r16
 5b0:	1f 93       	push	r17
 5b2:	cf 93       	push	r28
 5b4:	df 93       	push	r29
	int timer = Z-X;
 5b6:	00 91 ae 00 	lds	r16, 0x00AE	; 0x8000ae <X>
 5ba:	10 91 af 00 	lds	r17, 0x00AF	; 0x8000af <X+0x1>
 5be:	c0 91 aa 00 	lds	r28, 0x00AA	; 0x8000aa <__data_end>
 5c2:	d0 91 ab 00 	lds	r29, 0x00AB	; 0x8000ab <__data_end+0x1>
 5c6:	c0 1b       	sub	r28, r16
 5c8:	d1 0b       	sbc	r29, r17
	int freq = (16000000/timer)/1000;			// Calculate frequency
 5ca:	9e 01       	movw	r18, r28
 5cc:	0d 2e       	mov	r0, r29
 5ce:	00 0c       	add	r0, r0
 5d0:	44 0b       	sbc	r20, r20
 5d2:	55 0b       	sbc	r21, r21
 5d4:	60 e8       	ldi	r22, 0x80	; 128
 5d6:	7e e3       	ldi	r23, 0x3E	; 62
 5d8:	80 e0       	ldi	r24, 0x00	; 0
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__divmodsi4>
 5e0:	69 01       	movw	r12, r18
 5e2:	7a 01       	movw	r14, r20
	int dutycycle = (u16)((Y-X)*100)/timer;	// Calculate Duty Cycle
 5e4:	20 91 ac 00 	lds	r18, 0x00AC	; 0x8000ac <Y>
 5e8:	30 91 ad 00 	lds	r19, 0x00AD	; 0x8000ad <Y+0x1>
 5ec:	20 1b       	sub	r18, r16
 5ee:	31 0b       	sbc	r19, r17
 5f0:	44 e6       	ldi	r20, 0x64	; 100
 5f2:	42 9f       	mul	r20, r18
 5f4:	c0 01       	movw	r24, r0
 5f6:	43 9f       	mul	r20, r19
 5f8:	90 0d       	add	r25, r0
 5fa:	11 24       	eor	r1, r1
 5fc:	be 01       	movw	r22, r28
 5fe:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <__udivmodhi4>
 602:	8b 01       	movw	r16, r22
	Lcd_Goto_Row_Column(0, 2);
 604:	62 e0       	ldi	r22, 0x02	; 2
 606:	70 e0       	ldi	r23, 0x00	; 0
 608:	80 e0       	ldi	r24, 0x00	; 0
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	0e 94 cf 01 	call	0x39e	; 0x39e <Lcd_Goto_Row_Column>
	Lcd_DisplayNum(freq);
 610:	c6 01       	movw	r24, r12
 612:	0e 94 2f 02 	call	0x45e	; 0x45e <Lcd_DisplayNum>
	Lcd_Goto_Row_Column(0, 8);
 616:	68 e0       	ldi	r22, 0x08	; 8
 618:	70 e0       	ldi	r23, 0x00	; 0
 61a:	80 e0       	ldi	r24, 0x00	; 0
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	0e 94 cf 01 	call	0x39e	; 0x39e <Lcd_Goto_Row_Column>
	Lcd_DisplayNum(timer);
 622:	ce 01       	movw	r24, r28
 624:	0e 94 2f 02 	call	0x45e	; 0x45e <Lcd_DisplayNum>
	Lcd_Goto_Row_Column(0, 14);
 628:	6e e0       	ldi	r22, 0x0E	; 14
 62a:	70 e0       	ldi	r23, 0x00	; 0
 62c:	80 e0       	ldi	r24, 0x00	; 0
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	0e 94 cf 01 	call	0x39e	; 0x39e <Lcd_Goto_Row_Column>
	Lcd_Display2Num(dutycycle);
 634:	c8 01       	movw	r24, r16
 636:	0e 94 99 02 	call	0x532	; 0x532 <Lcd_Display2Num>
}
 63a:	df 91       	pop	r29
 63c:	cf 91       	pop	r28
 63e:	1f 91       	pop	r17
 640:	0f 91       	pop	r16
 642:	ff 90       	pop	r15
 644:	ef 90       	pop	r14
 646:	df 90       	pop	r13
 648:	cf 90       	pop	r12
 64a:	08 95       	ret

0000064c <PWM_Drawer>:

void PWM_Drawer()
{
 64c:	cf 92       	push	r12
 64e:	df 92       	push	r13
 650:	ef 92       	push	r14
 652:	ff 92       	push	r15
 654:	0f 93       	push	r16
 656:	1f 93       	push	r17
 658:	cf 93       	push	r28
 65a:	df 93       	push	r29
	 * 0 --> for Rising  Edge
	 * 1 --> for Rising  Line
	 * 2 --> for Falling Edge
	 * 3 --> for Falling Line
	 */
	int duty = (((Y-X)*100)/(Z-X));
 65c:	40 91 ae 00 	lds	r20, 0x00AE	; 0x8000ae <X>
 660:	50 91 af 00 	lds	r21, 0x00AF	; 0x8000af <X+0x1>
 664:	20 91 ac 00 	lds	r18, 0x00AC	; 0x8000ac <Y>
 668:	30 91 ad 00 	lds	r19, 0x00AD	; 0x8000ad <Y+0x1>
 66c:	24 1b       	sub	r18, r20
 66e:	35 0b       	sbc	r19, r21
 670:	64 e6       	ldi	r22, 0x64	; 100
 672:	62 9f       	mul	r22, r18
 674:	c0 01       	movw	r24, r0
 676:	63 9f       	mul	r22, r19
 678:	90 0d       	add	r25, r0
 67a:	11 24       	eor	r1, r1
 67c:	60 91 aa 00 	lds	r22, 0x00AA	; 0x8000aa <__data_end>
 680:	70 91 ab 00 	lds	r23, 0x00AB	; 0x8000ab <__data_end+0x1>
 684:	64 1b       	sub	r22, r20
 686:	75 0b       	sbc	r23, r21
 688:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <__udivmodhi4>
	int get_up = (duty*8)/100;
 68c:	cb 01       	movw	r24, r22
 68e:	88 0f       	add	r24, r24
 690:	99 1f       	adc	r25, r25
 692:	88 0f       	add	r24, r24
 694:	99 1f       	adc	r25, r25
 696:	88 0f       	add	r24, r24
 698:	99 1f       	adc	r25, r25
 69a:	64 e6       	ldi	r22, 0x64	; 100
 69c:	70 e0       	ldi	r23, 0x00	; 0
 69e:	0e 94 e6 03 	call	0x7cc	; 0x7cc <__divmodhi4>
 6a2:	7b 01       	movw	r14, r22
	int loop =0;
	int get_down = 8-get_up;
 6a4:	08 e0       	ldi	r16, 0x08	; 8
 6a6:	10 e0       	ldi	r17, 0x00	; 0
 6a8:	06 1b       	sub	r16, r22
 6aa:	17 0b       	sbc	r17, r23
	Lcd_Goto_Row_Column(1, 0);
 6ac:	60 e0       	ldi	r22, 0x00	; 0
 6ae:	70 e0       	ldi	r23, 0x00	; 0
 6b0:	81 e0       	ldi	r24, 0x01	; 1
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	0e 94 cf 01 	call	0x39e	; 0x39e <Lcd_Goto_Row_Column>
	 * 2 --> for Falling Edge
	 * 3 --> for Falling Line
	 */
	int duty = (((Y-X)*100)/(Z-X));
	int get_up = (duty*8)/100;
	int loop =0;
 6b8:	c1 2c       	mov	r12, r1
 6ba:	d1 2c       	mov	r13, r1
	int get_down = 8-get_up;
	Lcd_Goto_Row_Column(1, 0);
	while(loop<4){
 6bc:	21 c0       	rjmp	.+66     	; 0x700 <PWM_Drawer+0xb4>
		Lcd_DisplayChr(0);
 6be:	80 e0       	ldi	r24, 0x00	; 0
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	0e 94 95 01 	call	0x32a	; 0x32a <Lcd_DisplayChr>
		for(int up=1; up<get_up; up++)
 6c6:	c1 e0       	ldi	r28, 0x01	; 1
 6c8:	d0 e0       	ldi	r29, 0x00	; 0
 6ca:	05 c0       	rjmp	.+10     	; 0x6d6 <PWM_Drawer+0x8a>
			Lcd_DisplayChr(1);
 6cc:	81 e0       	ldi	r24, 0x01	; 1
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	0e 94 95 01 	call	0x32a	; 0x32a <Lcd_DisplayChr>
	int loop =0;
	int get_down = 8-get_up;
	Lcd_Goto_Row_Column(1, 0);
	while(loop<4){
		Lcd_DisplayChr(0);
		for(int up=1; up<get_up; up++)
 6d4:	21 96       	adiw	r28, 0x01	; 1
 6d6:	ce 15       	cp	r28, r14
 6d8:	df 05       	cpc	r29, r15
 6da:	c4 f3       	brlt	.-16     	; 0x6cc <PWM_Drawer+0x80>
			Lcd_DisplayChr(1);
		Lcd_DisplayChr(2);
 6dc:	82 e0       	ldi	r24, 0x02	; 2
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	0e 94 95 01 	call	0x32a	; 0x32a <Lcd_DisplayChr>
		for(int down=1; down<get_down; down++)
 6e4:	c1 e0       	ldi	r28, 0x01	; 1
 6e6:	d0 e0       	ldi	r29, 0x00	; 0
 6e8:	05 c0       	rjmp	.+10     	; 0x6f4 <PWM_Drawer+0xa8>
			Lcd_DisplayChr(3);
 6ea:	83 e0       	ldi	r24, 0x03	; 3
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	0e 94 95 01 	call	0x32a	; 0x32a <Lcd_DisplayChr>
	while(loop<4){
		Lcd_DisplayChr(0);
		for(int up=1; up<get_up; up++)
			Lcd_DisplayChr(1);
		Lcd_DisplayChr(2);
		for(int down=1; down<get_down; down++)
 6f2:	21 96       	adiw	r28, 0x01	; 1
 6f4:	c0 17       	cp	r28, r16
 6f6:	d1 07       	cpc	r29, r17
 6f8:	c4 f3       	brlt	.-16     	; 0x6ea <PWM_Drawer+0x9e>
			Lcd_DisplayChr(3);
		loop++;
 6fa:	8f ef       	ldi	r24, 0xFF	; 255
 6fc:	c8 1a       	sub	r12, r24
 6fe:	d8 0a       	sbc	r13, r24
	int duty = (((Y-X)*100)/(Z-X));
	int get_up = (duty*8)/100;
	int loop =0;
	int get_down = 8-get_up;
	Lcd_Goto_Row_Column(1, 0);
	while(loop<4){
 700:	84 e0       	ldi	r24, 0x04	; 4
 702:	c8 16       	cp	r12, r24
 704:	d1 04       	cpc	r13, r1
 706:	dc f2       	brlt	.-74     	; 0x6be <PWM_Drawer+0x72>
		Lcd_DisplayChr(2);
		for(int down=1; down<get_down; down++)
			Lcd_DisplayChr(3);
		loop++;
	}
 708:	df 91       	pop	r29
 70a:	cf 91       	pop	r28
 70c:	1f 91       	pop	r17
 70e:	0f 91       	pop	r16
 710:	ff 90       	pop	r15
 712:	ef 90       	pop	r14
 714:	df 90       	pop	r13
 716:	cf 90       	pop	r12
 718:	08 95       	ret

0000071a <main>:
#include"Std_Types.h"

u16 X=0,Y=0, Z=0;
int main()
{
	Lcd_Init();
 71a:	0e 94 de 01 	call	0x3bc	; 0x3bc <Lcd_Init>
	Lcd_Start();
 71e:	0e 94 b4 02 	call	0x568	; 0x568 <Lcd_Start>
	Dio_ConfigChannel(DIO_PORTD, DIO_PIN6, INPUT);
 722:	40 e0       	ldi	r20, 0x00	; 0
 724:	66 e0       	ldi	r22, 0x06	; 6
 726:	83 e0       	ldi	r24, 0x03	; 3
 728:	0e 94 49 00 	call	0x92	; 0x92 <Dio_ConfigChannel>
	u16 ICR = ((TIMER1_ICR1H_REG <<8) | (TIMER1_ICR1L_REG));
 72c:	c7 b5       	in	r28, 0x27	; 39
 72e:	d0 e0       	ldi	r29, 0x00	; 0
 730:	dc 2f       	mov	r29, r28
 732:	cc 27       	eor	r28, r28
 734:	86 b5       	in	r24, 0x26	; 38
 736:	c8 2b       	or	r28, r24
	u16 TCNT= ((TIMER1_TCNT1H_REG<<8) | (TIMER1_TCNT1L_REG));
 738:	8d b5       	in	r24, 0x2d	; 45
 73a:	8c b5       	in	r24, 0x2c	; 44
	SET_BIT(TIMER0_TIFR_REG, 5);	// Clear input capture flag
 73c:	88 b7       	in	r24, 0x38	; 56
 73e:	80 62       	ori	r24, 0x20	; 32
 740:	88 bf       	out	0x38, r24	; 56
	while(1){
		TCNT = 0;
		TIMER1_TCCR1A_REG = 0;
 742:	1f bc       	out	0x2f, r1	; 47
		// 1--> Capture Rising Edge
		// 0100 0001
		TIMER1_TCCR1B_REG = 0x41;	// Capture in Rising, No Prescaler
 744:	81 e4       	ldi	r24, 0x41	; 65
 746:	8e bd       	out	0x2e, r24	; 46
		while(!(CHK_BIT(TIMER0_TIFR_REG, 5)));
 748:	88 b7       	in	r24, 0x38	; 56
 74a:	80 72       	andi	r24, 0x20	; 32
 74c:	88 bf       	out	0x38, r24	; 56
 74e:	88 23       	and	r24, r24
 750:	d9 f3       	breq	.-10     	; 0x748 <main+0x2e>
		X = ICR;		// Store The First Value
 752:	d0 93 af 00 	sts	0x00AF, r29	; 0x8000af <X+0x1>
 756:	c0 93 ae 00 	sts	0x00AE, r28	; 0x8000ae <X>
		SET_BIT(TIMER0_TIFR_REG, 5);
 75a:	88 b7       	in	r24, 0x38	; 56
 75c:	80 62       	ori	r24, 0x20	; 32
 75e:	88 bf       	out	0x38, r24	; 56

		// 0--> Capture Falling Edge
		// 0000 0001
		TIMER1_TCCR1B_REG = 0x01;	// Capture in Falling, No  Prescaler
 760:	81 e0       	ldi	r24, 0x01	; 1
 762:	8e bd       	out	0x2e, r24	; 46
		while(!(CHK_BIT(TIMER0_TIFR_REG, 5)));
 764:	88 b7       	in	r24, 0x38	; 56
 766:	80 72       	andi	r24, 0x20	; 32
 768:	88 bf       	out	0x38, r24	; 56
 76a:	88 23       	and	r24, r24
 76c:	d9 f3       	breq	.-10     	; 0x764 <main+0x4a>
		Y = ICR;		// Store The second Value
 76e:	d0 93 ad 00 	sts	0x00AD, r29	; 0x8000ad <Y+0x1>
 772:	c0 93 ac 00 	sts	0x00AC, r28	; 0x8000ac <Y>
		SET_BIT(TIMER0_TIFR_REG, 5);
 776:	88 b7       	in	r24, 0x38	; 56
 778:	80 62       	ori	r24, 0x20	; 32
 77a:	88 bf       	out	0x38, r24	; 56

		// 1--> Capture Rising Edge
		// 0100 0001
		TIMER1_TCCR1B_REG = 0x41;	// Capture in Rising, No Prescaler
 77c:	81 e4       	ldi	r24, 0x41	; 65
 77e:	8e bd       	out	0x2e, r24	; 46
		while(!(CHK_BIT(TIMER0_TIFR_REG, 5)));
 780:	88 b7       	in	r24, 0x38	; 56
 782:	80 72       	andi	r24, 0x20	; 32
 784:	88 bf       	out	0x38, r24	; 56
 786:	88 23       	and	r24, r24
 788:	d9 f3       	breq	.-10     	; 0x780 <main+0x66>
		Z = ICR;		// Store The First Value
 78a:	d0 93 ab 00 	sts	0x00AB, r29	; 0x8000ab <__data_end+0x1>
 78e:	c0 93 aa 00 	sts	0x00AA, r28	; 0x8000aa <__data_end>
		SET_BIT(TIMER0_TIFR_REG, 5);
 792:	88 b7       	in	r24, 0x38	; 56
 794:	80 62       	ori	r24, 0x20	; 32
 796:	88 bf       	out	0x38, r24	; 56

		// Stop The Timer , 0000 0000
		TIMER1_TCCR1B_REG = 0;
 798:	1e bc       	out	0x2e, r1	; 46
		Update_Data();
 79a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <Update_Data>
		PWM_Drawer();
 79e:	0e 94 26 03 	call	0x64c	; 0x64c <PWM_Drawer>
	}
 7a2:	cf cf       	rjmp	.-98     	; 0x742 <main+0x28>

000007a4 <__udivmodhi4>:
 7a4:	aa 1b       	sub	r26, r26
 7a6:	bb 1b       	sub	r27, r27
 7a8:	51 e1       	ldi	r21, 0x11	; 17
 7aa:	07 c0       	rjmp	.+14     	; 0x7ba <__udivmodhi4_ep>

000007ac <__udivmodhi4_loop>:
 7ac:	aa 1f       	adc	r26, r26
 7ae:	bb 1f       	adc	r27, r27
 7b0:	a6 17       	cp	r26, r22
 7b2:	b7 07       	cpc	r27, r23
 7b4:	10 f0       	brcs	.+4      	; 0x7ba <__udivmodhi4_ep>
 7b6:	a6 1b       	sub	r26, r22
 7b8:	b7 0b       	sbc	r27, r23

000007ba <__udivmodhi4_ep>:
 7ba:	88 1f       	adc	r24, r24
 7bc:	99 1f       	adc	r25, r25
 7be:	5a 95       	dec	r21
 7c0:	a9 f7       	brne	.-22     	; 0x7ac <__udivmodhi4_loop>
 7c2:	80 95       	com	r24
 7c4:	90 95       	com	r25
 7c6:	bc 01       	movw	r22, r24
 7c8:	cd 01       	movw	r24, r26
 7ca:	08 95       	ret

000007cc <__divmodhi4>:
 7cc:	97 fb       	bst	r25, 7
 7ce:	07 2e       	mov	r0, r23
 7d0:	16 f4       	brtc	.+4      	; 0x7d6 <__divmodhi4+0xa>
 7d2:	00 94       	com	r0
 7d4:	07 d0       	rcall	.+14     	; 0x7e4 <__divmodhi4_neg1>
 7d6:	77 fd       	sbrc	r23, 7
 7d8:	09 d0       	rcall	.+18     	; 0x7ec <__divmodhi4_neg2>
 7da:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <__udivmodhi4>
 7de:	07 fc       	sbrc	r0, 7
 7e0:	05 d0       	rcall	.+10     	; 0x7ec <__divmodhi4_neg2>
 7e2:	3e f4       	brtc	.+14     	; 0x7f2 <__divmodhi4_exit>

000007e4 <__divmodhi4_neg1>:
 7e4:	90 95       	com	r25
 7e6:	81 95       	neg	r24
 7e8:	9f 4f       	sbci	r25, 0xFF	; 255
 7ea:	08 95       	ret

000007ec <__divmodhi4_neg2>:
 7ec:	70 95       	com	r23
 7ee:	61 95       	neg	r22
 7f0:	7f 4f       	sbci	r23, 0xFF	; 255

000007f2 <__divmodhi4_exit>:
 7f2:	08 95       	ret

000007f4 <__divmodsi4>:
 7f4:	05 2e       	mov	r0, r21
 7f6:	97 fb       	bst	r25, 7
 7f8:	1e f4       	brtc	.+6      	; 0x800 <__DATA_REGION_LENGTH__>
 7fa:	00 94       	com	r0
 7fc:	0e 94 11 04 	call	0x822	; 0x822 <__negsi2>
 800:	57 fd       	sbrc	r21, 7
 802:	07 d0       	rcall	.+14     	; 0x812 <__divmodsi4_neg2>
 804:	0e 94 28 04 	call	0x850	; 0x850 <__udivmodsi4>
 808:	07 fc       	sbrc	r0, 7
 80a:	03 d0       	rcall	.+6      	; 0x812 <__divmodsi4_neg2>
 80c:	4e f4       	brtc	.+18     	; 0x820 <__divmodsi4_exit>
 80e:	0c 94 11 04 	jmp	0x822	; 0x822 <__negsi2>

00000812 <__divmodsi4_neg2>:
 812:	50 95       	com	r21
 814:	40 95       	com	r20
 816:	30 95       	com	r19
 818:	21 95       	neg	r18
 81a:	3f 4f       	sbci	r19, 0xFF	; 255
 81c:	4f 4f       	sbci	r20, 0xFF	; 255
 81e:	5f 4f       	sbci	r21, 0xFF	; 255

00000820 <__divmodsi4_exit>:
 820:	08 95       	ret

00000822 <__negsi2>:
 822:	90 95       	com	r25
 824:	80 95       	com	r24
 826:	70 95       	com	r23
 828:	61 95       	neg	r22
 82a:	7f 4f       	sbci	r23, 0xFF	; 255
 82c:	8f 4f       	sbci	r24, 0xFF	; 255
 82e:	9f 4f       	sbci	r25, 0xFF	; 255
 830:	08 95       	ret

00000832 <__umulhisi3>:
 832:	a2 9f       	mul	r26, r18
 834:	b0 01       	movw	r22, r0
 836:	b3 9f       	mul	r27, r19
 838:	c0 01       	movw	r24, r0
 83a:	a3 9f       	mul	r26, r19
 83c:	70 0d       	add	r23, r0
 83e:	81 1d       	adc	r24, r1
 840:	11 24       	eor	r1, r1
 842:	91 1d       	adc	r25, r1
 844:	b2 9f       	mul	r27, r18
 846:	70 0d       	add	r23, r0
 848:	81 1d       	adc	r24, r1
 84a:	11 24       	eor	r1, r1
 84c:	91 1d       	adc	r25, r1
 84e:	08 95       	ret

00000850 <__udivmodsi4>:
 850:	a1 e2       	ldi	r26, 0x21	; 33
 852:	1a 2e       	mov	r1, r26
 854:	aa 1b       	sub	r26, r26
 856:	bb 1b       	sub	r27, r27
 858:	fd 01       	movw	r30, r26
 85a:	0d c0       	rjmp	.+26     	; 0x876 <__udivmodsi4_ep>

0000085c <__udivmodsi4_loop>:
 85c:	aa 1f       	adc	r26, r26
 85e:	bb 1f       	adc	r27, r27
 860:	ee 1f       	adc	r30, r30
 862:	ff 1f       	adc	r31, r31
 864:	a2 17       	cp	r26, r18
 866:	b3 07       	cpc	r27, r19
 868:	e4 07       	cpc	r30, r20
 86a:	f5 07       	cpc	r31, r21
 86c:	20 f0       	brcs	.+8      	; 0x876 <__udivmodsi4_ep>
 86e:	a2 1b       	sub	r26, r18
 870:	b3 0b       	sbc	r27, r19
 872:	e4 0b       	sbc	r30, r20
 874:	f5 0b       	sbc	r31, r21

00000876 <__udivmodsi4_ep>:
 876:	66 1f       	adc	r22, r22
 878:	77 1f       	adc	r23, r23
 87a:	88 1f       	adc	r24, r24
 87c:	99 1f       	adc	r25, r25
 87e:	1a 94       	dec	r1
 880:	69 f7       	brne	.-38     	; 0x85c <__udivmodsi4_loop>
 882:	60 95       	com	r22
 884:	70 95       	com	r23
 886:	80 95       	com	r24
 888:	90 95       	com	r25
 88a:	9b 01       	movw	r18, r22
 88c:	ac 01       	movw	r20, r24
 88e:	bd 01       	movw	r22, r26
 890:	cf 01       	movw	r24, r30
 892:	08 95       	ret

00000894 <_exit>:
 894:	f8 94       	cli

00000896 <__stop_program>:
 896:	ff cf       	rjmp	.-2      	; 0x896 <__stop_program>
